(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var AdLoader = require('./ad-loader');
(function() {
    var ads = {},
        adLoader;

    window.ads = window.ads || {placements: []};
    if (window.ads.adtech) {
        if (window.ads.placements.length) {
            adLoader = new AdLoader({adtech: window.ads.adtech, placements: window.ads.placements});
            adLoader.load();
        }
    } 
    window.ads.placements = {
        push: function(placement) {
            if (!adLoader) {
                adLoader = new AdLoader({adtech: window.ads.adtech});
            }
            adLoader.load(placement);
        }
    };
}(this));

},{"./ad-loader":3}],2:[function(require,module,exports){
;(function (name, definition) {
    var root = this;
    if (typeof define === 'function' && define.amd) {
        define(name, function() {
            return (root[name] = definition());
        });
    } else {
        window[name] = definition();
    }
})('happy', function() {
    var AdLoader = require('./ad-loader')
    return AdLoader;
});


},{"./ad-loader":3}],3:[function(require,module,exports){
(function (global){

var createIframe = require('./create-iframe');
var bind = require('./utils').bind;
var onElement = require('./utils').onElement;
var extend = require('./utils').extend;

var AdLoader = function(config) {
    var self = this;
    this.config = extend({
        adtech: {},
        placements: []
    }, config);
    
};

AdLoader.prototype = {
    getRequest: function() {
        var self = this,
            request;

        if (window.XMLHttpRequest) {
            request = new XMLHttpRequest();
        } else {
            request = new global.ActiveXObject("MSXML2.XMLHTTP.3.0");
        }
        request.onreadystatechange = function() {
            if (request.readyState === 4) {
                console.log('Hello, i am ads and here i am');
                self.onResponse.call(self, JSON.parse(request.responseText));
            }
        };

        return request;
    },
    isEmpty: function(src) {
        return (src.indexOf(this.config.emptySelector) === -1);
    },
    onResponse: function(ads) {
        var i, p, ad, src, iframe, container, placement;
        for(i in ads.ADTECH_MultiAd) {
            ad = ads.ADTECH_MultiAd[i];
            src = ad.Ad.AdCode;

            if (this.isEmpty(src)) {
                placement = null;
                for (p in this.config.placements) {
                    if (this.config.placements[p].id == parseInt(ad.PlacementId, 10)) {
                        placement = this.config.placements[p];
                        console.log(placement, this.config.placements[placement], parseInt(ad.PlacementId, 10));

                        break;
                    }
                }
                if (placement) {
                    if (!placement.selector) {
                        placement.selector = '#ad-'+ placement.name;
                    }

                    iframe = new createIframe(placement.id, ad.Ad.AdCode);

                    onElement(placement.selector, bind(iframe.renderTo, iframe), this.onElementFound);
                }
            }
            container = null;
        }
    },

    onElementNotFound: function() {
        console.log('No container found');
    },

    load: function(placements) {
        var ids = [], i, request;
        if (typeof(placements) !== 'undefined') {
            if (typeof(placements.id) !== 'undefined') {
                this.config.placements.push(placements);
                placements = [placements];
            } else if (typeof(placements.length) !== 'undefined') {
                this.config.placements = this.config.placements.concat(placements);
            }
        } else {
            placements = this.config.placements;
        }
        for (i in placements) {
            ids.push(placements[i].id);
        }
        
        console.log('Where are you ads?', ids);
        request = this.getRequest();
        request.open('GET', (this.config.proxy || '..') +'/proxy.php?placements='+ ids.join(','), true);
        request.send();
    }
};

module.exports = AdLoader;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./create-iframe":4,"./utils":5}],4:[function(require,module,exports){
var on = require('./utils').on,
    bind = require('./utils').bind,
    attr = require('./utils').attr,
    nextTick  = require('./utils').nextTick;

var lazyIframe;

var createIframe = function(id, script) {
    var src = '', url;

    this.id = id;

    src += '<!doctype *><html><head><style>body { margin:0; )</style></head><body><div id="ad">';
    src += '<script>';
    src += script;
    src += '</script>';
    src += '</div></body></html>';

    if (!lazyIframe) {
        this.iframe = lazyIframe = document.createElement('iframe');
    } else {
        this.iframe = lazyIframe.cloneNode();
    }

    this.renderIframeContents(id, src);

    on(this.iframe, 'load', bind(this.onLoad, this));
    on(this.iframe, 'load', bind(this.resize, this));
};

createIframe.prototype.supportSrcDoc = function () {
    var support = 'srcdoc' in this.iframe;

    this.supportSrcDoc = function() {
        return support;
    };

    return this.supportSrcDoc();
};

createIframe.prototype.renderIframeContents = function(id, src) {
    attr(this.iframe, {
        id: id,
        scrolling: 'no',
        frameborder: 0
    });

    if (this.supportSrcDoc()) {
        this.iframe.setAttribute('srcdoc', src);
        attr(this.iframe, {
            srcdoc: src
        });
    }

    if (!this.supportSrcDoc()) {
        this.iframe.contentDocument.open();
        this.iframe.contentDocument.write(src);
        setTimeout(bind(function() { this.iframe.contentDocument.close(); }, this), 100);
        console.log('srcdoc missing, writing old school');
    }

};

createIframe.prototype.renderTo = function(container) {
    nextTick(bind(function() {
        while(container.lastChild) {
            container.removeChild(container.lastChild);
        }
        container.appendChild(this.iframe);
    }, this));
};

createIframe.prototype.container = function() {
    return this.iframe;
};

createIframe.prototype.remove = function() {
    console.log('Removing: #'+ this.id);
    if (this.iframe.parentNode) {
        this.iframe.parentNode.removeChild(this.iframe);
    }
};

createIframe.prototype.onLoad = function() {
    var ifDoc = this.iframe.contentDocument;

    console.log('Loaded: #'+ this.id);

    if (ifDoc.querySelector('[src*="blank_pix_house.gif"]')) {
        this.remove();
    }
};

createIframe.prototype.resize = function() {
    var ifDoc = this.iframe.contentDocument;
    if (ifDoc) {
        var html = ifDoc.documentElement,
            height = html.scrollHeight,
            width = html.scrollWidth;
        console.log('Resize: #'+ this.id +' width:'+ width +'px height:'+ height +'px');
        console.count('resize');
        if (height === 0 || width === 0) {
            this.remove();
        } else {
            attr(this.iframe, {
                width: width,
                height: height
            });
        }
    } else {
        this.remove();
    }
};

module.exports = createIframe;

},{"./utils":5}],5:[function(require,module,exports){
var on = (function(el, ev, callback) {
    if (el.addEventListener) {
        return el.addEventListener(ev, callback, false);
    }
    else {
        return el.attachEvent('on'+ ev, callback);
    }
});

var bind = function(func, obj) {
    if (func.bind) {
        return func.bind(obj);
    }
    else {
        return function() {
            return func.apply(obj, arguments);
        };
    }
};

var attr = function(elem, attrs) {
    for (var name in attrs) {
        elem.setAttribute(name, attrs[name]);
    }
};

var nextTick = (function() {
    if (window.Promise) {
        var resolved = Promise.resolve();
        return function(fn) {
            resolved.then(fn);
        };
    }
    else if (window.setImmidiate) {
        return function(fn) {
            setImmidiate(fn);
        };
    }
    else {
        return function(fn) {
            setTimeout(fn, 0);
        };
    }
})();

var onElement = function(selector, cb, cbNotFound) {
    var el = document.querySelector(selector);
    if (el) {
        cb(el);
    } else if (document.readyState !== 'complete') {
        nextTick(function() { onElement(selector, cb, cbNotFound); });
    } else {
        if (typeof(cbNotFound) === 'function') {
            cbNotFound();
        }
    }
};

var extend = function (obj, props) {
    for(var prop in props) {
        if(props.hasOwnProperty(prop)) {
            obj[prop] = props[prop];
        }
    }

    return obj;
};

module.exports = {
    bind: bind,
    attr: attr,
    on: on,
    onElement: onElement,
    nextTick: nextTick,
    extend: extend
};

},{}]},{},[2,1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJsaWIvYXN5bmMiLCJsaWIvaW5kZXguanMiLCJsaWIvYWQtbG9hZGVyLmpzIiwibGliL2NyZWF0ZS1pZnJhbWUuanMiLCJsaWIvdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUMvRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgQWRMb2FkZXIgPSByZXF1aXJlKCcuL2FkLWxvYWRlcicpO1xuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBhZHMgPSB7fSxcbiAgICAgICAgYWRMb2FkZXI7XG5cbiAgICB3aW5kb3cuYWRzID0gd2luZG93LmFkcyB8fCB7cGxhY2VtZW50czogW119O1xuICAgIGlmICh3aW5kb3cuYWRzLmFkdGVjaCkge1xuICAgICAgICBpZiAod2luZG93LmFkcy5wbGFjZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRMb2FkZXIgPSBuZXcgQWRMb2FkZXIoe2FkdGVjaDogd2luZG93LmFkcy5hZHRlY2gsIHBsYWNlbWVudHM6IHdpbmRvdy5hZHMucGxhY2VtZW50c30pO1xuICAgICAgICAgICAgYWRMb2FkZXIubG9hZCgpO1xuICAgICAgICB9XG4gICAgfSBcbiAgICB3aW5kb3cuYWRzLnBsYWNlbWVudHMgPSB7XG4gICAgICAgIHB1c2g6IGZ1bmN0aW9uKHBsYWNlbWVudCkge1xuICAgICAgICAgICAgaWYgKCFhZExvYWRlcikge1xuICAgICAgICAgICAgICAgIGFkTG9hZGVyID0gbmV3IEFkTG9hZGVyKHthZHRlY2g6IHdpbmRvdy5hZHMuYWR0ZWNofSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZExvYWRlci5sb2FkKHBsYWNlbWVudCk7XG4gICAgICAgIH1cbiAgICB9O1xufSh0aGlzKSk7XG4iLCI7KGZ1bmN0aW9uIChuYW1lLCBkZWZpbml0aW9uKSB7XG4gICAgdmFyIHJvb3QgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKG5hbWUsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIChyb290W25hbWVdID0gZGVmaW5pdGlvbigpKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93W25hbWVdID0gZGVmaW5pdGlvbigpO1xuICAgIH1cbn0pKCdoYXBweScsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBBZExvYWRlciA9IHJlcXVpcmUoJy4vYWQtbG9hZGVyJylcbiAgICByZXR1cm4gQWRMb2FkZXI7XG59KTtcblxuIiwiXG52YXIgY3JlYXRlSWZyYW1lID0gcmVxdWlyZSgnLi9jcmVhdGUtaWZyYW1lJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vdXRpbHMnKS5iaW5kO1xudmFyIG9uRWxlbWVudCA9IHJlcXVpcmUoJy4vdXRpbHMnKS5vbkVsZW1lbnQ7XG52YXIgZXh0ZW5kID0gcmVxdWlyZSgnLi91dGlscycpLmV4dGVuZDtcblxudmFyIEFkTG9hZGVyID0gZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuY29uZmlnID0gZXh0ZW5kKHtcbiAgICAgICAgYWR0ZWNoOiB7fSxcbiAgICAgICAgcGxhY2VtZW50czogW11cbiAgICB9LCBjb25maWcpO1xuICAgIFxufTtcblxuQWRMb2FkZXIucHJvdG90eXBlID0ge1xuICAgIGdldFJlcXVlc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICByZXF1ZXN0O1xuXG4gICAgICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcXVlc3QgPSBuZXcgZ2xvYmFsLkFjdGl2ZVhPYmplY3QoXCJNU1hNTDIuWE1MSFRUUC4zLjBcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSGVsbG8sIGkgYW0gYWRzIGFuZCBoZXJlIGkgYW0nKTtcbiAgICAgICAgICAgICAgICBzZWxmLm9uUmVzcG9uc2UuY2FsbChzZWxmLCBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgfSxcbiAgICBpc0VtcHR5OiBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgcmV0dXJuIChzcmMuaW5kZXhPZih0aGlzLmNvbmZpZy5lbXB0eVNlbGVjdG9yKSA9PT0gLTEpO1xuICAgIH0sXG4gICAgb25SZXNwb25zZTogZnVuY3Rpb24oYWRzKSB7XG4gICAgICAgIHZhciBpLCBwLCBhZCwgc3JjLCBpZnJhbWUsIGNvbnRhaW5lciwgcGxhY2VtZW50O1xuICAgICAgICBmb3IoaSBpbiBhZHMuQURURUNIX011bHRpQWQpIHtcbiAgICAgICAgICAgIGFkID0gYWRzLkFEVEVDSF9NdWx0aUFkW2ldO1xuICAgICAgICAgICAgc3JjID0gYWQuQWQuQWRDb2RlO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KHNyYykpIHtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGZvciAocCBpbiB0aGlzLmNvbmZpZy5wbGFjZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5wbGFjZW1lbnRzW3BdLmlkID09IHBhcnNlSW50KGFkLlBsYWNlbWVudElkLCAxMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9IHRoaXMuY29uZmlnLnBsYWNlbWVudHNbcF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhwbGFjZW1lbnQsIHRoaXMuY29uZmlnLnBsYWNlbWVudHNbcGxhY2VtZW50XSwgcGFyc2VJbnQoYWQuUGxhY2VtZW50SWQsIDEwKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChwbGFjZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGFjZW1lbnQuc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudC5zZWxlY3RvciA9ICcjYWQtJysgcGxhY2VtZW50Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZnJhbWUgPSBuZXcgY3JlYXRlSWZyYW1lKHBsYWNlbWVudC5pZCwgYWQuQWQuQWRDb2RlKTtcblxuICAgICAgICAgICAgICAgICAgICBvbkVsZW1lbnQocGxhY2VtZW50LnNlbGVjdG9yLCBiaW5kKGlmcmFtZS5yZW5kZXJUbywgaWZyYW1lKSwgdGhpcy5vbkVsZW1lbnRGb3VuZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGFpbmVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBvbkVsZW1lbnROb3RGb3VuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdObyBjb250YWluZXIgZm91bmQnKTtcbiAgICB9LFxuXG4gICAgbG9hZDogZnVuY3Rpb24ocGxhY2VtZW50cykge1xuICAgICAgICB2YXIgaWRzID0gW10sIGksIHJlcXVlc3Q7XG4gICAgICAgIGlmICh0eXBlb2YocGxhY2VtZW50cykgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKHBsYWNlbWVudHMuaWQpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnBsYWNlbWVudHMucHVzaChwbGFjZW1lbnRzKTtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRzID0gW3BsYWNlbWVudHNdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YocGxhY2VtZW50cy5sZW5ndGgpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnBsYWNlbWVudHMgPSB0aGlzLmNvbmZpZy5wbGFjZW1lbnRzLmNvbmNhdChwbGFjZW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsYWNlbWVudHMgPSB0aGlzLmNvbmZpZy5wbGFjZW1lbnRzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSBpbiBwbGFjZW1lbnRzKSB7XG4gICAgICAgICAgICBpZHMucHVzaChwbGFjZW1lbnRzW2ldLmlkKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc29sZS5sb2coJ1doZXJlIGFyZSB5b3UgYWRzPycsIGlkcyk7XG4gICAgICAgIHJlcXVlc3QgPSB0aGlzLmdldFJlcXVlc3QoKTtcbiAgICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLCAodGhpcy5jb25maWcucHJveHkgfHwgJy4uJykgKycvcHJveHkucGhwP3BsYWNlbWVudHM9JysgaWRzLmpvaW4oJywnKSwgdHJ1ZSk7XG4gICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQWRMb2FkZXI7XG4iLCJ2YXIgb24gPSByZXF1aXJlKCcuL3V0aWxzJykub24sXG4gICAgYmluZCA9IHJlcXVpcmUoJy4vdXRpbHMnKS5iaW5kLFxuICAgIGF0dHIgPSByZXF1aXJlKCcuL3V0aWxzJykuYXR0cixcbiAgICBuZXh0VGljayAgPSByZXF1aXJlKCcuL3V0aWxzJykubmV4dFRpY2s7XG5cbnZhciBsYXp5SWZyYW1lO1xuXG52YXIgY3JlYXRlSWZyYW1lID0gZnVuY3Rpb24oaWQsIHNjcmlwdCkge1xuICAgIHZhciBzcmMgPSAnJywgdXJsO1xuXG4gICAgdGhpcy5pZCA9IGlkO1xuXG4gICAgc3JjICs9ICc8IWRvY3R5cGUgKj48aHRtbD48aGVhZD48c3R5bGU+Ym9keSB7IG1hcmdpbjowOyApPC9zdHlsZT48L2hlYWQ+PGJvZHk+PGRpdiBpZD1cImFkXCI+JztcbiAgICBzcmMgKz0gJzxzY3JpcHQ+JztcbiAgICBzcmMgKz0gc2NyaXB0O1xuICAgIHNyYyArPSAnPC9zY3JpcHQ+JztcbiAgICBzcmMgKz0gJzwvZGl2PjwvYm9keT48L2h0bWw+JztcblxuICAgIGlmICghbGF6eUlmcmFtZSkge1xuICAgICAgICB0aGlzLmlmcmFtZSA9IGxhenlJZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlmcmFtZSA9IGxhenlJZnJhbWUuY2xvbmVOb2RlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJJZnJhbWVDb250ZW50cyhpZCwgc3JjKTtcblxuICAgIG9uKHRoaXMuaWZyYW1lLCAnbG9hZCcsIGJpbmQodGhpcy5vbkxvYWQsIHRoaXMpKTtcbiAgICBvbih0aGlzLmlmcmFtZSwgJ2xvYWQnLCBiaW5kKHRoaXMucmVzaXplLCB0aGlzKSk7XG59O1xuXG5jcmVhdGVJZnJhbWUucHJvdG90eXBlLnN1cHBvcnRTcmNEb2MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1cHBvcnQgPSAnc3JjZG9jJyBpbiB0aGlzLmlmcmFtZTtcblxuICAgIHRoaXMuc3VwcG9ydFNyY0RvYyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gc3VwcG9ydDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuc3VwcG9ydFNyY0RvYygpO1xufTtcblxuY3JlYXRlSWZyYW1lLnByb3RvdHlwZS5yZW5kZXJJZnJhbWVDb250ZW50cyA9IGZ1bmN0aW9uKGlkLCBzcmMpIHtcbiAgICBhdHRyKHRoaXMuaWZyYW1lLCB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgc2Nyb2xsaW5nOiAnbm8nLFxuICAgICAgICBmcmFtZWJvcmRlcjogMFxuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuc3VwcG9ydFNyY0RvYygpKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3JjZG9jJywgc3JjKTtcbiAgICAgICAgYXR0cih0aGlzLmlmcmFtZSwge1xuICAgICAgICAgICAgc3JjZG9jOiBzcmNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnN1cHBvcnRTcmNEb2MoKSkge1xuICAgICAgICB0aGlzLmlmcmFtZS5jb250ZW50RG9jdW1lbnQub3BlbigpO1xuICAgICAgICB0aGlzLmlmcmFtZS5jb250ZW50RG9jdW1lbnQud3JpdGUoc3JjKTtcbiAgICAgICAgc2V0VGltZW91dChiaW5kKGZ1bmN0aW9uKCkgeyB0aGlzLmlmcmFtZS5jb250ZW50RG9jdW1lbnQuY2xvc2UoKTsgfSwgdGhpcyksIDEwMCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzcmNkb2MgbWlzc2luZywgd3JpdGluZyBvbGQgc2Nob29sJyk7XG4gICAgfVxuXG59O1xuXG5jcmVhdGVJZnJhbWUucHJvdG90eXBlLnJlbmRlclRvID0gZnVuY3Rpb24oY29udGFpbmVyKSB7XG4gICAgbmV4dFRpY2soYmluZChmdW5jdGlvbigpIHtcbiAgICAgICAgd2hpbGUoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmlmcmFtZSk7XG4gICAgfSwgdGhpcykpO1xufTtcblxuY3JlYXRlSWZyYW1lLnByb3RvdHlwZS5jb250YWluZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pZnJhbWU7XG59O1xuXG5jcmVhdGVJZnJhbWUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKCdSZW1vdmluZzogIycrIHRoaXMuaWQpO1xuICAgIGlmICh0aGlzLmlmcmFtZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIHRoaXMuaWZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5pZnJhbWUpO1xuICAgIH1cbn07XG5cbmNyZWF0ZUlmcmFtZS5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlmRG9jID0gdGhpcy5pZnJhbWUuY29udGVudERvY3VtZW50O1xuXG4gICAgY29uc29sZS5sb2coJ0xvYWRlZDogIycrIHRoaXMuaWQpO1xuXG4gICAgaWYgKGlmRG9jLnF1ZXJ5U2VsZWN0b3IoJ1tzcmMqPVwiYmxhbmtfcGl4X2hvdXNlLmdpZlwiXScpKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgfVxufTtcblxuY3JlYXRlSWZyYW1lLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWZEb2MgPSB0aGlzLmlmcmFtZS5jb250ZW50RG9jdW1lbnQ7XG4gICAgaWYgKGlmRG9jKSB7XG4gICAgICAgIHZhciBodG1sID0gaWZEb2MuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICAgICAgaGVpZ2h0ID0gaHRtbC5zY3JvbGxIZWlnaHQsXG4gICAgICAgICAgICB3aWR0aCA9IGh0bWwuc2Nyb2xsV2lkdGg7XG4gICAgICAgIGNvbnNvbGUubG9nKCdSZXNpemU6ICMnKyB0aGlzLmlkICsnIHdpZHRoOicrIHdpZHRoICsncHggaGVpZ2h0OicrIGhlaWdodCArJ3B4Jyk7XG4gICAgICAgIGNvbnNvbGUuY291bnQoJ3Jlc2l6ZScpO1xuICAgICAgICBpZiAoaGVpZ2h0ID09PSAwIHx8IHdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXR0cih0aGlzLmlmcmFtZSwge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlSWZyYW1lO1xuIiwidmFyIG9uID0gKGZ1bmN0aW9uKGVsLCBldiwgY2FsbGJhY2spIHtcbiAgICBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICByZXR1cm4gZWwuYWRkRXZlbnRMaXN0ZW5lcihldiwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBlbC5hdHRhY2hFdmVudCgnb24nKyBldiwgY2FsbGJhY2spO1xuICAgIH1cbn0pO1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIG9iaikge1xuICAgIGlmIChmdW5jLmJpbmQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuYmluZChvYmopO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqLCBhcmd1bWVudHMpO1xuICAgICAgICB9O1xuICAgIH1cbn07XG5cbnZhciBhdHRyID0gZnVuY3Rpb24oZWxlbSwgYXR0cnMpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGF0dHJzKSB7XG4gICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKG5hbWUsIGF0dHJzW25hbWVdKTtcbiAgICB9XG59O1xuXG52YXIgbmV4dFRpY2sgPSAoZnVuY3Rpb24oKSB7XG4gICAgaWYgKHdpbmRvdy5Qcm9taXNlKSB7XG4gICAgICAgIHZhciByZXNvbHZlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHJlc29sdmVkLnRoZW4oZm4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICh3aW5kb3cuc2V0SW1taWRpYXRlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgc2V0SW1taWRpYXRlKGZuKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihmbikge1xuICAgICAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgICAgIH07XG4gICAgfVxufSkoKTtcblxudmFyIG9uRWxlbWVudCA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBjYiwgY2JOb3RGb3VuZCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIGlmIChlbCkge1xuICAgICAgICBjYihlbCk7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9PSAnY29tcGxldGUnKSB7XG4gICAgICAgIG5leHRUaWNrKGZ1bmN0aW9uKCkgeyBvbkVsZW1lbnQoc2VsZWN0b3IsIGNiLCBjYk5vdEZvdW5kKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZihjYk5vdEZvdW5kKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2JOb3RGb3VuZCgpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIGV4dGVuZCA9IGZ1bmN0aW9uIChvYmosIHByb3BzKSB7XG4gICAgZm9yKHZhciBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgIGlmKHByb3BzLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICBvYmpbcHJvcF0gPSBwcm9wc1twcm9wXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBiaW5kOiBiaW5kLFxuICAgIGF0dHI6IGF0dHIsXG4gICAgb246IG9uLFxuICAgIG9uRWxlbWVudDogb25FbGVtZW50LFxuICAgIG5leHRUaWNrOiBuZXh0VGljayxcbiAgICBleHRlbmQ6IGV4dGVuZFxufTtcbiJdfQ==
